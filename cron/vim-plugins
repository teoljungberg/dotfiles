#!/bin/sh

set -e
[ -n "$DEBUG" ] && set -ex

bundles="
  https://github.com/AndrewRadev/splitjoin.vim
  https://github.com/LnL7/vim-nix
  https://github.com/dense-analysis/ale
  https://github.com/direnv/direnv.vim
  https://github.com/junegunn/fzf.vim
  https://github.com/pbrisbin/vim-mkdir
  https://github.com/teoljungberg/vim-whitescale
  https://github.com/tommcdo/vim-exchange
  https://github.com/vim-ruby/vim-ruby
  https://tpope.io/vim/abolish
  https://tpope.io/vim/bundler
  https://tpope.io/vim/commentary
  https://tpope.io/vim/dispatch
  https://tpope.io/vim/endwise
  https://tpope.io/vim/eunuch
  https://tpope.io/vim/fugitive
  https://tpope.io/vim/git
  https://tpope.io/vim/markdown
  https://tpope.io/vim/projectionist
  https://tpope.io/vim/rails
  https://tpope.io/vim/rake
  https://tpope.io/vim/repeat
  https://tpope.io/vim/rhubarb
  https://tpope.io/vim/scriptease
  https://tpope.io/vim/sleuth
  https://tpope.io/vim/surround
  https://tpope.io/vim/unimpaired
  https://tpope.io/vim/vinegar
"

find_upstream() {
  if git -C "$1" branch | grep -q "main"; then
    echo "main"
  elif git -C "$1" branch | grep -q "master"; then
    echo "master"
  elif git -C "$1" branch | grep -q "release"; then
    echo "release"
  fi
}

no_upstream_found() {
  echo "No upstream can be found for '$1'"
  exit 1
}

display_new_commits_github() {
  work_tree_path="$1"
  sha_range="$2"
  slug="$(
    git -C "$work_tree_path" config remote.origin.url \
      | rev \
      | cut -d / -f 1,2 \
      | rev
  )"

  echo "https://github.com/$slug/compare/$sha_range"
}

display_new_commits_tpope() {
  work_tree_path="$1"
  sha_range="$2"
  repository="vim-$(basename "$1")"

  echo "https://github.com/tpope/$repository/compare/$sha_range"
}

display_new_commits() {
  work_tree_path="$1"
  upstream=$(find_upstream "$work_tree_path") || no_upstream_found "$work_tree_path"
  current_sha="$(git -C "$work_tree_path" rev-parse --short HEAD)"
  new_sha="$(git -C "$work_tree_path" rev-parse --short "origin/$upstream")"
  current_branch="$(git -C "$work_tree_path" symbolic-ref --short HEAD)"
  remote="$(git -C "$work_tree_path" remote show -n origin | grep "Fetch URL")"

  if [ "$current_branch" = "$upstream" ] && [ "$current_sha" != "$new_sha" ]; then
    sha_range="$current_sha...$new_sha"

    if echo "$remote" | grep -q github.com; then
      display_new_commits_github "$work_tree_path" "$sha_range"
    elif echo "$remote" | grep -q tpope.io; then
      display_new_commits_tpope "$work_tree_path" "$sha_range"
    else
      echo "$work_tree_path"
      git -C "$work_tree_path" --no-pager log --oneline "$sha_range"
      echo
    fi
  fi
}

for bundle in ${bundles}; do
  bundle_name="$(basename "$bundle")"
  vim_bundle="$HOME/.vim/pack/bundle/start/$bundle_name"

  if [ ! -d "$vim_bundle" ]; then
    git clone "$bundle" "$vim_bundle"
  fi
done

find "$HOME/.vim/pack/bundle" -maxdepth 3 -type d -name ".git" | while read -r path; do
  path="${path%/.git}"
  did_stash="0"

  if [ -n "$(git -C "$path" remote)" ]; then
    git -C "$path" fetch -q origin

    display_new_commits "$path"

    if [ -n "$(git -C "$path" status --porcelain)" ]; then
      git -C "$path" stash push -q 1> /dev/null 2> /dev/null
      did_stash="1"
    fi

    upstream=$(find_upstream "$path") || no_upstream_found "$path"
    git -C "$path" rebase -q "origin/$upstream" > /dev/null

    if [ "$did_stash" = "1" ]; then
      git -C "$path" stash pop -q 1> /dev/null 2> /dev/null
    fi
  fi
done

nohup vim -u NONE -c "helptags ALL" -cq >/dev/null 2>&1 </dev/null &
